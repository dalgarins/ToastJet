{
  parserClass = 'com.ronnie.toastjet.editor.JsonParser'
  parserUtilClass = "com.intellij.json.psi.JsonParserUtil"
  psiPackage = 'com.intellij.json.psi'
  psiImplPackage = 'com.intellij.json.psi.impl'

  elementTypeHolderClass = 'com.intellij.json.JsonElementTypes'
  elementTypeClass = 'com.intellij.json.JsonElementType'
  psiClassPrefix = "Json"
  psiVisitorName = "JsonElementVisitor"

  psiImplUtilClass = 'com.intellij.json.psi.impl.JsonPsiImplUtils'
  tokenTypeClass = 'com.intellij.json.JsonTokenType'

  implements("value") = "com.intellij.json.psi.JsonElement"
  extends("value") = "com.intellij.json.psi.impl.JsonElementImpl"

  tokens = [
    L_CURLY='{'
    R_CURLY='}'
    L_BRACKET='['
    R_BRACKET=']'
    COMMA=','
    COLON=':'
    LINE_COMMENT='regexp://.*'
    BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
    REFERENCE_EXPRESSION='regexp:\{\{[^\}]+\}\}'
    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
    NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
    TRUE='true'
    FALSE='false'
    NULL='null'
    IDENTIFIER="regexp:[[:jletterdigit:]~!()*\-./@\^<>=]+"
  ]


  extends("container|literal|reference_expression")=value
  extends("array|object")=container
  extends("string_literal|number_literal|boolean_literal|null_literal")=literal
  implements("property")=[
    "com.intellij.json.psi.JsonElement"
    "com.intellij.psi.PsiNamedElement"
  ]
}

json ::= value*

object ::= '{' object_element* '}' {
  pin=1
  methods=[
    findProperty
    getPresentation
  ]
  mixin="com.intellij.json.psi.impl.JsonObjectMixin"
}

private object_element ::= property (','|&'}') {
  recoverWhile = not_brace_or_next_value
  pin = 1
}

private property_value ::= value

property ::= property_name (':' property_value) {
  methods=[
    getName
    getNameElement
    getValue
    value=""
    getPresentation
  ]
  mixin="com.intellij.json.psi.impl.JsonPropertyMixin"
  pin(".*")=1
}

private property_name ::= literal | reference_expression

array ::= '[' array_element* ']' {
  methods=[
    getPresentation
  ]
  pin=1
}

private array_element ::= value (','|&']') {
  recoverWhile = not_bracket_or_next_value
  pin=1
}

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING {
  methods=[
    getTextFragments
    getValue
    isPropertyName
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin="com.intellij.json.psi.impl.JsonStringLiteralMixin"
}

number_literal ::= NUMBER {
  methods=[
    NUMBER=""
    getValue
  ]
}

boolean_literal ::= TRUE | FALSE {
  methods=[
    getValue
  ]
}

null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[
    isQuotedString
  ]
  mixin="com.intellij.json.psi.impl.JsonLiteralMixin"
}

fake container ::=

reference_expression ::= REFERENCE_EXPRESSION

value ::= object | array | literal | reference_expression

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)